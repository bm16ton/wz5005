#include "dps.hpp"
#include "settings.h"
#include <stdint.h>
#include "Arduino.h"


//uint8_t voltsnamp[4] = {0x00,0x00,0x00,0x00};
static uint8_t recvd[20] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
static uint8_t recvd2[20] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
static uint8_t recstart[20] = {0xAA,0x01,0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD6};
static uint8_t readon[20] = {0xAA,0x01,0x23,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD1};
//static uint8_t onread[20] = {0xAA,0x01,0x29,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD4};
//static uint8_t pwrset[20] = {0xAA,0x01,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCD};
static uint8_t poop[20] = {0xAA,0x01,0x2C,0x13,0x88,0x12,0xAB,0x01,0xF4,0x00,0x04,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x6A};
static uint8_t offoff2[20] = {0xAA,0x01,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCD};
static uint8_t onon2[20] = {0xAA,0x01,0x22,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCE};
static uint8_t onoffcccvget[20] = {0xAA,0x01,0x23,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCF};
static uint8_t onoffcccvsave[20] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
int addedup = (0xAA+0x01+0x2C+0x13+0x88+0x12+0xAB+0x04+0x42);

uint8_t sumsum(void) {
  uint8_t result = 0;
  for (int i = 0; i <= 18; i++) {
  result = (result + poop[i]);
    }
  return result;
}

extern volatile int doupdateon;
extern volatile int doupdateout;
int old = 0;

bool dps_read_status(dps_status *dest) {

if (doupdateout == 2) {
if (doupdateon == 1) {
  dest->onoff = 1;
  dest->offon = 0;
  Serial1.write(onon2, 20);
  Serial.println("PSU output on");
  delay(500);
} else if (doupdateon == 0) {
  dest->offon = 1;
  dest->onoff = 0;
  Serial1.write(offoff2, 20);
  Serial.println("PSU output off");
  delay(100);
//  val = 1;
  }
  doupdateout = 0;
  }
  old = doupdateon;
  Serial.println("dps_read_status");
  delay(30);
  Serial1.write(onoffcccvget, 20);

  delay(100);

  if (Serial.available()) {
    for (int i = 0; i <= 19; i++) {
    onoffcccvsave[i] = Serial.read();
    }
  }

    dest->uset = (uint16_t)((poop[7] << 8) + (poop[8] & 0x00ff)); 
    dest->iset = (uint16_t)((poop[9] << 8) + (poop[10] & 0x00ff));
    dest->uout = (uint16_t)((poop[7] << 8) + (poop[8] & 0x00ff));;
    dest->iout = (uint16_t)((poop[9] << 8) + (poop[10] & 0x00ff));;
    dest->power = 0x00; //htons2(dest->power);
    dest->uin = 0x00; //htons2(dest->uin);
    dest->lock = 0x00; //htons2(dest->lock);
    dest->protect = 0x00; //htons2(dest->protect);
//    dest->onoff = (uint16_t)doupdateon;
    return true;
}

bool dps_set_voltage(const uint16_t voltage) {
  dps_status dps;
  delay(100);
  poop[7] = ((uint8_t)(voltage >> 8));
  poop[8] = ((uint8_t)voltage);
  poop[19] = sumsum();
  Serial1.write(poop, 20);
  delay(200);
  return true;
}

bool dps_set_current(const uint16_t current) {
  poop[9] = ((uint8_t)(current >> 8));
  poop[10] = ((uint8_t)current);
  poop[19] = sumsum();
  Serial1.write(poop, 20);
  delay(200);
return true;
}

bool dps_set_voltage_current(const uint16_t voltage, const uint16_t current) {
  dps_set_current(current);
  dps_set_voltage(voltage);
return 0;
}
